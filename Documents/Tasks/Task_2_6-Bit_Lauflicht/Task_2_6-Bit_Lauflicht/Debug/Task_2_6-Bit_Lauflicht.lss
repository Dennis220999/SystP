
Task_2_6-Bit_Lauflicht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075e  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ab  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000292  00000000  00000000  00000fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003eb  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000091  00000000  00000000  000016ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setUp>:

#define TOGGLE_BIT(PORT,BIT) PORT ^=(1<<BIT)

void setUp(void){
	//make complete DDRC to an output
	DDRC |= 0b111111;
  80:	87 b1       	in	r24, 0x07	; 7
  82:	8f 63       	ori	r24, 0x3F	; 63
  84:	87 b9       	out	0x07, r24	; 7
	//sink complete DDRC
	PORTC &= ~(0b111111);
  86:	88 b1       	in	r24, 0x08	; 8
  88:	80 7c       	andi	r24, 0xC0	; 192
  8a:	88 b9       	out	0x08, r24	; 8
  8c:	08 95       	ret

0000008e <loop>:
}
void loop(/*int &numberOfLights*/){
	/*static*/register int positionLamp = 0;
	int direction = -1;
  8e:	6f ef       	ldi	r22, 0xFF	; 255
  90:	7f ef       	ldi	r23, 0xFF	; 255
	DDRC |= 0b111111;
	//sink complete DDRC
	PORTC &= ~(0b111111);
}
void loop(/*int &numberOfLights*/){
	/*static*/register int positionLamp = 0;
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
	int direction = -1;
	while(1){
		if(positionLamp==0||positionLamp==5)
			direction*=-1;
		TOGGLE_BIT(PORTC,positionLamp);	//AN
  96:	e1 e0       	ldi	r30, 0x01	; 1
  98:	f0 e0       	ldi	r31, 0x00	; 0
}
void loop(/*int &numberOfLights*/){
	/*static*/register int positionLamp = 0;
	int direction = -1;
	while(1){
		if(positionLamp==0||positionLamp==5)
  9a:	21 15       	cp	r18, r1
  9c:	31 05       	cpc	r19, r1
  9e:	19 f0       	breq	.+6      	; 0xa6 <loop+0x18>
  a0:	25 30       	cpi	r18, 0x05	; 5
  a2:	31 05       	cpc	r19, r1
  a4:	19 f4       	brne	.+6      	; 0xac <loop+0x1e>
			direction*=-1;
  a6:	71 95       	neg	r23
  a8:	61 95       	neg	r22
  aa:	71 09       	sbc	r23, r1
		TOGGLE_BIT(PORTC,positionLamp);	//AN
  ac:	48 b1       	in	r20, 0x08	; 8
  ae:	cf 01       	movw	r24, r30
  b0:	02 2e       	mov	r0, r18
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <loop+0x2a>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <loop+0x26>
  bc:	94 2f       	mov	r25, r20
  be:	98 27       	eor	r25, r24
  c0:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	4f ef       	ldi	r20, 0xFF	; 255
  c4:	51 ee       	ldi	r21, 0xE1	; 225
  c6:	a4 e0       	ldi	r26, 0x04	; 4
  c8:	41 50       	subi	r20, 0x01	; 1
  ca:	50 40       	sbci	r21, 0x00	; 0
  cc:	a0 40       	sbci	r26, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <loop+0x3a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <loop+0x44>
  d2:	00 00       	nop
		_delay_ms(100);
		TOGGLE_BIT(PORTC,positionLamp); //AUS
  d4:	98 b1       	in	r25, 0x08	; 8
  d6:	89 27       	eor	r24, r25
  d8:	88 b9       	out	0x08, r24	; 8
		positionLamp+=direction;
  da:	26 0f       	add	r18, r22
  dc:	37 1f       	adc	r19, r23
	}	
  de:	dd cf       	rjmp	.-70     	; 0x9a <loop+0xc>

000000e0 <main>:
}
int main(void)
{
	//int numberOfLights = 1; //range between 1-5
	setUp();
  e0:	0e 94 40 00 	call	0x80	; 0x80 <setUp>
	loop(/*numberOfLights*/);
  e4:	0e 94 47 00 	call	0x8e	; 0x8e <loop>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
