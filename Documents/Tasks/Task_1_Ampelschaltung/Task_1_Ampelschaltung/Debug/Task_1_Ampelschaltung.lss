
Task_1_Ampelschaltung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ec  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006af  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e6  00000000  00000000  000010ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d2  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  000017aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setUp>:

#define TOGGLE_BIT(PORT,BIT) PORT^=(1<<BIT)

void setUp(void){
	//make DDD2-DDD4 outputs
	DDRD |= 0b000011100; //0b000011100;
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8c 61       	ori	r24, 0x1C	; 28
  84:	8a b9       	out	0x0a, r24	; 10
	//output low
	PORTD &= ~(0b000011100);		
  86:	8b b1       	in	r24, 0x0b	; 11
  88:	83 7e       	andi	r24, 0xE3	; 227
  8a:	8b b9       	out	0x0b, r24	; 11
  8c:	08 95       	ret

0000008e <loop>:
}
void loop(void){
	while(1){
		TOGGLE_BIT(PORTD,DDD2); //turn ON RED
  8e:	34 e0       	ldi	r19, 0x04	; 4
		_delay_ms(3000);
		TOGGLE_BIT(PORTD,DDD3); //turn ON YELLOW
  90:	88 e0       	ldi	r24, 0x08	; 8
		_delay_ms(1000);
		TOGGLE_BIT(PORTD,DDD2);
		TOGGLE_BIT(PORTD,DDD3); //turn RED & YELLOW OFF
		TOGGLE_BIT(PORTD,DDD4); //turn ON GREEN
  92:	20 e1       	ldi	r18, 0x10	; 16
	//output low
	PORTD &= ~(0b000011100);		
}
void loop(void){
	while(1){
		TOGGLE_BIT(PORTD,DDD2); //turn ON RED
  94:	9b b1       	in	r25, 0x0b	; 11
  96:	93 27       	eor	r25, r19
  98:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	4f ef       	ldi	r20, 0xFF	; 255
  9c:	5b e7       	ldi	r21, 0x7B	; 123
  9e:	92 e9       	ldi	r25, 0x92	; 146
  a0:	41 50       	subi	r20, 0x01	; 1
  a2:	50 40       	sbci	r21, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <loop+0x12>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <loop+0x1c>
  aa:	00 00       	nop
		_delay_ms(3000);
		TOGGLE_BIT(PORTD,DDD3); //turn ON YELLOW
  ac:	9b b1       	in	r25, 0x0b	; 11
  ae:	98 27       	eor	r25, r24
  b0:	9b b9       	out	0x0b, r25	; 11
  b2:	4f ef       	ldi	r20, 0xFF	; 255
  b4:	53 ed       	ldi	r21, 0xD3	; 211
  b6:	90 e3       	ldi	r25, 0x30	; 48
  b8:	41 50       	subi	r20, 0x01	; 1
  ba:	50 40       	sbci	r21, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <loop+0x2a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <loop+0x34>
  c2:	00 00       	nop
		_delay_ms(1000);
		TOGGLE_BIT(PORTD,DDD2);
  c4:	9b b1       	in	r25, 0x0b	; 11
  c6:	93 27       	eor	r25, r19
  c8:	9b b9       	out	0x0b, r25	; 11
		TOGGLE_BIT(PORTD,DDD3); //turn RED & YELLOW OFF
  ca:	9b b1       	in	r25, 0x0b	; 11
  cc:	98 27       	eor	r25, r24
  ce:	9b b9       	out	0x0b, r25	; 11
		TOGGLE_BIT(PORTD,DDD4); //turn ON GREEN
  d0:	9b b1       	in	r25, 0x0b	; 11
  d2:	92 27       	eor	r25, r18
  d4:	9b b9       	out	0x0b, r25	; 11
  d6:	4f ef       	ldi	r20, 0xFF	; 255
  d8:	5b e7       	ldi	r21, 0x7B	; 123
  da:	92 e9       	ldi	r25, 0x92	; 146
  dc:	41 50       	subi	r20, 0x01	; 1
  de:	50 40       	sbci	r21, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <loop+0x4e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <loop+0x58>
  e6:	00 00       	nop
		_delay_ms(3000);
		TOGGLE_BIT(PORTD,DDD4); //turn OFF GREEN
  e8:	9b b1       	in	r25, 0x0b	; 11
  ea:	92 27       	eor	r25, r18
  ec:	9b b9       	out	0x0b, r25	; 11
		TOGGLE_BIT(PORTD,DDD3); //turn ON YELLOW
  ee:	9b b1       	in	r25, 0x0b	; 11
  f0:	98 27       	eor	r25, r24
  f2:	9b b9       	out	0x0b, r25	; 11
  f4:	4f ef       	ldi	r20, 0xFF	; 255
  f6:	53 ed       	ldi	r21, 0xD3	; 211
  f8:	90 e3       	ldi	r25, 0x30	; 48
  fa:	41 50       	subi	r20, 0x01	; 1
  fc:	50 40       	sbci	r21, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <loop+0x6c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <loop+0x76>
 104:	00 00       	nop
		_delay_ms(1000);
		TOGGLE_BIT(PORTD,DDD3); //turn OFF YELLOW		
 106:	9b b1       	in	r25, 0x0b	; 11
 108:	98 27       	eor	r25, r24
 10a:	9b b9       	out	0x0b, r25	; 11
 10c:	c3 cf       	rjmp	.-122    	; 0x94 <loop+0x6>

0000010e <main>:
	}
}
int main(void)
{
	setUp();
 10e:	0e 94 40 00 	call	0x80	; 0x80 <setUp>
    loop();
 112:	0e 94 47 00 	call	0x8e	; 0x8e <loop>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
